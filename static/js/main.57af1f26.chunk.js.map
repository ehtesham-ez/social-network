{"version":3,"sources":["app/Navbar.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/SinglePostPage.js","features/posts/EditPostForm.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","className","to","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","initialState","content","sub","Date","minutes","toISOString","reactions","heart","postsSlice","createSlice","reducers","postAdded","reducer","action","push","payload","prepare","nanoid","reactionAdded","postId","reaction","existingPost","post","postUpdated","actions","reactionEmoji","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","type","onClick","PostsList","renderedPosts","posts","slice","sort","a","b","localeCompare","substring","AddPostForm","useState","setTitle","setContent","setUserId","canSave","Boolean","usersOptions","value","htmlFor","onChange","e","target","disabled","SinglePostPage","match","params","EditPostForm","history","useHistory","placeholder","App","seedDate","exact","path","render","Fragment","component","usersSlice","configureStore","postsReducer","userReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","Error","create","get","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","thumbsUp","hooray","rocket","eyes","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.57af1f26.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector(state =>\r\n    state.users.find(user => user.id === userId)\r\n  )\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>\r\n};","import React from 'react';\r\nimport { parseISO, formatDistanceToNow } from 'date-fns';\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = '';\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp);\r\n    const timePeriod = formatDistanceToNow(date);\r\n    timeAgo = `${timePeriod} ago`;\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  );\r\n}","import { createSlice, nanoid } from '@reduxjs/toolkit';\r\nimport { sub } from 'date-fns';\r\n\r\nconst initialState = [\r\n    { user: '1', id: '1', title: 'First Post!', content: 'Hello!', date: sub(new Date(), { minutes: 10 }).toISOString(), reactions: { heart: 14 } },\r\n    { user: '2', id: '2', title: 'Second Post', content: 'More text', date: sub(new Date(), { minutes: 5 }).toISOString(), reactions: { heart: 25 }},\r\n    { user: '0', id: 'XKXArvMtacXy4hRb3YGnV', title: 'Hello World!', content: 'Hello World, in this post body I am want to announce to you that I am learning Redux.', date: sub(new Date(), { minutes: 7 }).toISOString(), reactions: { heart: 147 } }\r\n];\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postAdded: {\r\n            reducer(state, action) {\r\n                state.push(action.payload);\r\n            },\r\n            prepare(title, content, userId) {\r\n                return {\r\n                    payload: {\r\n                        id: nanoid(),\r\n                        date: new Date().toISOString(),\r\n                        title,\r\n                        content,\r\n                        user: userId,\r\n                        reactions: {\r\n                            heart: 0,\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        },\r\n        reactionAdded(state, action) {\r\n            const { postId, reaction } = action.payload;\r\n            const existingPost = state.find(post => post.id === postId);\r\n            if (existingPost) {\r\n              existingPost.reactions[reaction]++\r\n            }\r\n        },\r\n        postUpdated(state, action) {\r\n            const { id, title, content } = action.payload;\r\n            const existingPost = state.find(post => post.id === id);\r\n            if (existingPost) {\r\n              existingPost.title = title;\r\n              existingPost.content = content;\r\n            }\r\n        },\r\n    },\r\n});\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions;\r\n\r\nexport default postsSlice.reducer;","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { reactionAdded } from './postsSlice';\r\n\r\nconst reactionEmoji = {\r\n  heart: '❤️',\r\n};\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n        onClick={() =>\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div>{reactionButtons}</div>\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\n\r\nexport const PostsList = () => {\r\n  const posts = useSelector(state => state.posts);\r\n\r\n  const orderedPosts = posts.slice().sort((a, b) => b.date.localeCompare(a.date));\r\n\r\n  const renderedPosts = orderedPosts.map(post => {\r\n    return (\r\n      <article className=\"post-excerpt\" key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n        <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n          View Post\r\n        </Link>\r\n      </article>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  );\r\n}","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nimport { postAdded } from \"./postsSlice\";\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const users = useSelector(state => state.users);\r\n\r\n  const onTitleChanged = e => setTitle(e.target.value);\r\n  const onContentChanged = e => setContent(e.target.value);\r\n  const onAuthorChanged = e => setUserId(e.target.value);\r\n\r\n  const onSavePostClicked = () =>{\r\n      if (title && content) {\r\n        dispatch(postAdded(title, content, userId));\r\n          setTitle('');\r\n          setContent('');\r\n          setUserId('');\r\n      }\r\n  };\r\n\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId);\r\n\r\n  const usersOptions = users.map(user => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ));\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {usersOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { PostAuthor } from \"./PostAuthor\";\r\nimport { TimeAgo } from \"./TimeAgo\";\r\nimport { ReactionButtons } from \"./ReactionButtons\";\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector(state =>\r\n    state.posts.find(post => post.id === postId)\r\n  );\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n        <PostAuthor userId={post.user} />\r\n        <TimeAgo timestamp={post.date} />\r\n        <p className=\"post-content\">{post.content}</p>\r\n        <ReactionButtons post={post} />\r\n        <br />\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { postUpdated } from './postsSlice';\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params;\r\n\r\n  const post = useSelector(state =>\r\n    state.posts.find(post => post.id === postId)\r\n  );\r\n\r\n  const [title, setTitle] = useState(post.title);\r\n  const [content, setContent] = useState(post.content);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onTitleChanged = e => setTitle(e.target.value);\r\n  const onContentChanged = e => setContent(e.target.value);\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({ id: postId, title, content }));\r\n      history.push(`/posts/${postId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  );\r\n}","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\nimport { PostsList } from './features/posts/PostsList';\nimport { AddPostForm } from './features/posts/AddPostForm';\nimport { SinglePostPage } from './features/posts/SinglePostPage';\nimport { EditPostForm } from './features/posts/EditPostForm';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = [\r\n  { id: '0', name: 'Tianna Jenkins' },\r\n  { id: '1', name: 'Kevin Grant' },\r\n  { id: '2', name: 'Madison Price' }\r\n];\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {}\r\n});\r\n\r\nexport default usersSlice.reducer;","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice';\nimport userReducer from \"../features/users/usersSlice\";\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: userReducer,\n  }\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}